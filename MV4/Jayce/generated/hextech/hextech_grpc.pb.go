// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: hextech.proto

package hextech

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Hextech_ReceiveChanges_FullMethodName = "/hextech.Hextech/ReceiveChanges"
	Hextech_ReceiveFile_FullMethodName    = "/hextech.Hextech/ReceiveFile"
	Hextech_MergeChanges_FullMethodName   = "/hextech.Hextech/MergeChanges"
)

// HextechClient is the client API for Hextech service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HextechClient interface {
	ReceiveChanges(ctx context.Context, in *ChangesRequest, opts ...grpc.CallOption) (*ChangesResponse, error)
	ReceiveFile(ctx context.Context, in *ReceiveFileRequest, opts ...grpc.CallOption) (*ReceiveFileResponse, error)
	MergeChanges(ctx context.Context, in *MergeChangesRequest, opts ...grpc.CallOption) (*MergeChangesResponse, error)
}

type hextechClient struct {
	cc grpc.ClientConnInterface
}

func NewHextechClient(cc grpc.ClientConnInterface) HextechClient {
	return &hextechClient{cc}
}

func (c *hextechClient) ReceiveChanges(ctx context.Context, in *ChangesRequest, opts ...grpc.CallOption) (*ChangesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangesResponse)
	err := c.cc.Invoke(ctx, Hextech_ReceiveChanges_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hextechClient) ReceiveFile(ctx context.Context, in *ReceiveFileRequest, opts ...grpc.CallOption) (*ReceiveFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReceiveFileResponse)
	err := c.cc.Invoke(ctx, Hextech_ReceiveFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hextechClient) MergeChanges(ctx context.Context, in *MergeChangesRequest, opts ...grpc.CallOption) (*MergeChangesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MergeChangesResponse)
	err := c.cc.Invoke(ctx, Hextech_MergeChanges_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HextechServer is the server API for Hextech service.
// All implementations must embed UnimplementedHextechServer
// for forward compatibility.
type HextechServer interface {
	ReceiveChanges(context.Context, *ChangesRequest) (*ChangesResponse, error)
	ReceiveFile(context.Context, *ReceiveFileRequest) (*ReceiveFileResponse, error)
	MergeChanges(context.Context, *MergeChangesRequest) (*MergeChangesResponse, error)
	mustEmbedUnimplementedHextechServer()
}

// UnimplementedHextechServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHextechServer struct{}

func (UnimplementedHextechServer) ReceiveChanges(context.Context, *ChangesRequest) (*ChangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveChanges not implemented")
}
func (UnimplementedHextechServer) ReceiveFile(context.Context, *ReceiveFileRequest) (*ReceiveFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveFile not implemented")
}
func (UnimplementedHextechServer) MergeChanges(context.Context, *MergeChangesRequest) (*MergeChangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergeChanges not implemented")
}
func (UnimplementedHextechServer) mustEmbedUnimplementedHextechServer() {}
func (UnimplementedHextechServer) testEmbeddedByValue()                 {}

// UnsafeHextechServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HextechServer will
// result in compilation errors.
type UnsafeHextechServer interface {
	mustEmbedUnimplementedHextechServer()
}

func RegisterHextechServer(s grpc.ServiceRegistrar, srv HextechServer) {
	// If the following call pancis, it indicates UnimplementedHextechServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Hextech_ServiceDesc, srv)
}

func _Hextech_ReceiveChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HextechServer).ReceiveChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hextech_ReceiveChanges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HextechServer).ReceiveChanges(ctx, req.(*ChangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hextech_ReceiveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HextechServer).ReceiveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hextech_ReceiveFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HextechServer).ReceiveFile(ctx, req.(*ReceiveFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hextech_MergeChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergeChangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HextechServer).MergeChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hextech_MergeChanges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HextechServer).MergeChanges(ctx, req.(*MergeChangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Hextech_ServiceDesc is the grpc.ServiceDesc for Hextech service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Hextech_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hextech.Hextech",
	HandlerType: (*HextechServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReceiveChanges",
			Handler:    _Hextech_ReceiveChanges_Handler,
		},
		{
			MethodName: "ReceiveFile",
			Handler:    _Hextech_ReceiveFile_Handler,
		},
		{
			MethodName: "MergeChanges",
			Handler:    _Hextech_MergeChanges_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hextech.proto",
}
