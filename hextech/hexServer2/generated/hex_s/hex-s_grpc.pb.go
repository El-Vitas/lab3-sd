// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: hex-s.proto

package hex_s

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HexS_AddRecord_FullMethodName         = "/hex_s.HexS/AddRecord"
	HexS_DeleteRecord_FullMethodName      = "/hex_s.HexS/DeleteRecord"
	HexS_RenameRecord_FullMethodName      = "/hex_s.HexS/RenameRecord"
	HexS_UpdateRecordValue_FullMethodName = "/hex_s.HexS/UpdateRecordValue"
	HexS_GetData_FullMethodName           = "/hex_s.HexS/GetData"
)

// HexSClient is the client API for HexS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HexSClient interface {
	AddRecord(ctx context.Context, in *AddRecordRequest, opts ...grpc.CallOption) (*AddRecordResponse, error)
	DeleteRecord(ctx context.Context, in *DeleteRecordRequest, opts ...grpc.CallOption) (*DeleteRecordResponse, error)
	RenameRecord(ctx context.Context, in *RenameRecordRequest, opts ...grpc.CallOption) (*RenameRecordResponse, error)
	UpdateRecordValue(ctx context.Context, in *UpdateRecordRequest, opts ...grpc.CallOption) (*UpdateRecordResponse, error)
	GetData(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (*GetDataResponse, error)
}

type hexSClient struct {
	cc grpc.ClientConnInterface
}

func NewHexSClient(cc grpc.ClientConnInterface) HexSClient {
	return &hexSClient{cc}
}

func (c *hexSClient) AddRecord(ctx context.Context, in *AddRecordRequest, opts ...grpc.CallOption) (*AddRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddRecordResponse)
	err := c.cc.Invoke(ctx, HexS_AddRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hexSClient) DeleteRecord(ctx context.Context, in *DeleteRecordRequest, opts ...grpc.CallOption) (*DeleteRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRecordResponse)
	err := c.cc.Invoke(ctx, HexS_DeleteRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hexSClient) RenameRecord(ctx context.Context, in *RenameRecordRequest, opts ...grpc.CallOption) (*RenameRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RenameRecordResponse)
	err := c.cc.Invoke(ctx, HexS_RenameRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hexSClient) UpdateRecordValue(ctx context.Context, in *UpdateRecordRequest, opts ...grpc.CallOption) (*UpdateRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRecordResponse)
	err := c.cc.Invoke(ctx, HexS_UpdateRecordValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hexSClient) GetData(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (*GetDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDataResponse)
	err := c.cc.Invoke(ctx, HexS_GetData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HexSServer is the server API for HexS service.
// All implementations must embed UnimplementedHexSServer
// for forward compatibility.
type HexSServer interface {
	AddRecord(context.Context, *AddRecordRequest) (*AddRecordResponse, error)
	DeleteRecord(context.Context, *DeleteRecordRequest) (*DeleteRecordResponse, error)
	RenameRecord(context.Context, *RenameRecordRequest) (*RenameRecordResponse, error)
	UpdateRecordValue(context.Context, *UpdateRecordRequest) (*UpdateRecordResponse, error)
	GetData(context.Context, *GetDataRequest) (*GetDataResponse, error)
	mustEmbedUnimplementedHexSServer()
}

// UnimplementedHexSServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHexSServer struct{}

func (UnimplementedHexSServer) AddRecord(context.Context, *AddRecordRequest) (*AddRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRecord not implemented")
}
func (UnimplementedHexSServer) DeleteRecord(context.Context, *DeleteRecordRequest) (*DeleteRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRecord not implemented")
}
func (UnimplementedHexSServer) RenameRecord(context.Context, *RenameRecordRequest) (*RenameRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameRecord not implemented")
}
func (UnimplementedHexSServer) UpdateRecordValue(context.Context, *UpdateRecordRequest) (*UpdateRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecordValue not implemented")
}
func (UnimplementedHexSServer) GetData(context.Context, *GetDataRequest) (*GetDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetData not implemented")
}
func (UnimplementedHexSServer) mustEmbedUnimplementedHexSServer() {}
func (UnimplementedHexSServer) testEmbeddedByValue()              {}

// UnsafeHexSServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HexSServer will
// result in compilation errors.
type UnsafeHexSServer interface {
	mustEmbedUnimplementedHexSServer()
}

func RegisterHexSServer(s grpc.ServiceRegistrar, srv HexSServer) {
	// If the following call pancis, it indicates UnimplementedHexSServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HexS_ServiceDesc, srv)
}

func _HexS_AddRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HexSServer).AddRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HexS_AddRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HexSServer).AddRecord(ctx, req.(*AddRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HexS_DeleteRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HexSServer).DeleteRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HexS_DeleteRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HexSServer).DeleteRecord(ctx, req.(*DeleteRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HexS_RenameRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HexSServer).RenameRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HexS_RenameRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HexSServer).RenameRecord(ctx, req.(*RenameRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HexS_UpdateRecordValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HexSServer).UpdateRecordValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HexS_UpdateRecordValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HexSServer).UpdateRecordValue(ctx, req.(*UpdateRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HexS_GetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HexSServer).GetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HexS_GetData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HexSServer).GetData(ctx, req.(*GetDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HexS_ServiceDesc is the grpc.ServiceDesc for HexS service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HexS_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hex_s.HexS",
	HandlerType: (*HexSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddRecord",
			Handler:    _HexS_AddRecord_Handler,
		},
		{
			MethodName: "DeleteRecord",
			Handler:    _HexS_DeleteRecord_Handler,
		},
		{
			MethodName: "RenameRecord",
			Handler:    _HexS_RenameRecord_Handler,
		},
		{
			MethodName: "UpdateRecordValue",
			Handler:    _HexS_UpdateRecordValue_Handler,
		},
		{
			MethodName: "GetData",
			Handler:    _HexS_GetData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hex-s.proto",
}
