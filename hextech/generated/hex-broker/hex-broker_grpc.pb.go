// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: hex-broker.proto

package hexbroker

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HexBroker_AddRecord_FullMethodName         = "/hexbroker.HexBroker/AddRecord"
	HexBroker_DeleteRecord_FullMethodName      = "/hexbroker.HexBroker/DeleteRecord"
	HexBroker_RenameRecord_FullMethodName      = "/hexbroker.HexBroker/RenameRecord"
	HexBroker_UpdateRecordValue_FullMethodName = "/hexbroker.HexBroker/UpdateRecordValue"
)

// HexBrokerClient is the client API for HexBroker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HexBrokerClient interface {
	AddRecord(ctx context.Context, in *AddRecordRequest, opts ...grpc.CallOption) (*AddRecordResponse, error)
	DeleteRecord(ctx context.Context, in *DeleteRecordRequest, opts ...grpc.CallOption) (*DeleteRecordResponse, error)
	RenameRecord(ctx context.Context, in *RenameRecordRequest, opts ...grpc.CallOption) (*RenameRecordResponse, error)
	UpdateRecordValue(ctx context.Context, in *UpdateRecordRequest, opts ...grpc.CallOption) (*UpdateRecordResponse, error)
}

type hexBrokerClient struct {
	cc grpc.ClientConnInterface
}

func NewHexBrokerClient(cc grpc.ClientConnInterface) HexBrokerClient {
	return &hexBrokerClient{cc}
}

func (c *hexBrokerClient) AddRecord(ctx context.Context, in *AddRecordRequest, opts ...grpc.CallOption) (*AddRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddRecordResponse)
	err := c.cc.Invoke(ctx, HexBroker_AddRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hexBrokerClient) DeleteRecord(ctx context.Context, in *DeleteRecordRequest, opts ...grpc.CallOption) (*DeleteRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRecordResponse)
	err := c.cc.Invoke(ctx, HexBroker_DeleteRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hexBrokerClient) RenameRecord(ctx context.Context, in *RenameRecordRequest, opts ...grpc.CallOption) (*RenameRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RenameRecordResponse)
	err := c.cc.Invoke(ctx, HexBroker_RenameRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hexBrokerClient) UpdateRecordValue(ctx context.Context, in *UpdateRecordRequest, opts ...grpc.CallOption) (*UpdateRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRecordResponse)
	err := c.cc.Invoke(ctx, HexBroker_UpdateRecordValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HexBrokerServer is the server API for HexBroker service.
// All implementations must embed UnimplementedHexBrokerServer
// for forward compatibility.
type HexBrokerServer interface {
	AddRecord(context.Context, *AddRecordRequest) (*AddRecordResponse, error)
	DeleteRecord(context.Context, *DeleteRecordRequest) (*DeleteRecordResponse, error)
	RenameRecord(context.Context, *RenameRecordRequest) (*RenameRecordResponse, error)
	UpdateRecordValue(context.Context, *UpdateRecordRequest) (*UpdateRecordResponse, error)
	mustEmbedUnimplementedHexBrokerServer()
}

// UnimplementedHexBrokerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHexBrokerServer struct{}

func (UnimplementedHexBrokerServer) AddRecord(context.Context, *AddRecordRequest) (*AddRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRecord not implemented")
}
func (UnimplementedHexBrokerServer) DeleteRecord(context.Context, *DeleteRecordRequest) (*DeleteRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRecord not implemented")
}
func (UnimplementedHexBrokerServer) RenameRecord(context.Context, *RenameRecordRequest) (*RenameRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameRecord not implemented")
}
func (UnimplementedHexBrokerServer) UpdateRecordValue(context.Context, *UpdateRecordRequest) (*UpdateRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecordValue not implemented")
}
func (UnimplementedHexBrokerServer) mustEmbedUnimplementedHexBrokerServer() {}
func (UnimplementedHexBrokerServer) testEmbeddedByValue()                   {}

// UnsafeHexBrokerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HexBrokerServer will
// result in compilation errors.
type UnsafeHexBrokerServer interface {
	mustEmbedUnimplementedHexBrokerServer()
}

func RegisterHexBrokerServer(s grpc.ServiceRegistrar, srv HexBrokerServer) {
	// If the following call pancis, it indicates UnimplementedHexBrokerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HexBroker_ServiceDesc, srv)
}

func _HexBroker_AddRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HexBrokerServer).AddRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HexBroker_AddRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HexBrokerServer).AddRecord(ctx, req.(*AddRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HexBroker_DeleteRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HexBrokerServer).DeleteRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HexBroker_DeleteRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HexBrokerServer).DeleteRecord(ctx, req.(*DeleteRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HexBroker_RenameRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HexBrokerServer).RenameRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HexBroker_RenameRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HexBrokerServer).RenameRecord(ctx, req.(*RenameRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HexBroker_UpdateRecordValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HexBrokerServer).UpdateRecordValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HexBroker_UpdateRecordValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HexBrokerServer).UpdateRecordValue(ctx, req.(*UpdateRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HexBroker_ServiceDesc is the grpc.ServiceDesc for HexBroker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HexBroker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hexbroker.HexBroker",
	HandlerType: (*HexBrokerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddRecord",
			Handler:    _HexBroker_AddRecord_Handler,
		},
		{
			MethodName: "DeleteRecord",
			Handler:    _HexBroker_DeleteRecord_Handler,
		},
		{
			MethodName: "RenameRecord",
			Handler:    _HexBroker_RenameRecord_Handler,
		},
		{
			MethodName: "UpdateRecordValue",
			Handler:    _HexBroker_UpdateRecordValue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hex-broker.proto",
}
